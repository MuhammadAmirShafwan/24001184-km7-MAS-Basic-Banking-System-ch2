// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int           @id @default(autoincrement())
  name     String
  email    String        @unique
  password String
  profile  Profile? // onDelete di sini
  accounts BankAccount[] // juga di sini
}

model Profile {
  id             Int    @id @default(autoincrement())
  userId         Int    @unique
  identityType   String
  identityNumber String
  address        String
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade) // tidak ada onDelete di sini
}

model BankAccount {
  id                   Int           @id @default(autoincrement())
  userId               Int
  bankName             String
  bankAccountNumber    String        @unique
  balance              Float         @default(0)
  user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactionsSent     Transaction[] @relation("sent")
  transactionsReceived Transaction[] @relation("received")
}

model Transaction {
  id                   Int          @id @default(autoincrement())
  transactionType      String
  sourceAccountId      Int?
  destinationAccountId Int?
  amount               Float
  sourceAccount        BankAccount? @relation("sent", fields: [sourceAccountId], references: [id], onDelete: Cascade)
  destinationAccount   BankAccount? @relation("received", fields: [destinationAccountId], references: [id], onDelete: Cascade)
}
